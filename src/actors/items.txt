// --------------------------------------------------------------------------
//
// ARGENT: Items
//
// --------------------------------------------------------------------------

ACTOR ArgVerserkWow : Berserk replaces Berserk
{
	Inventory.PickupMessage "$ARG_GOT_BERSERK"
	Inventory.PickupSound "items/pickup/powerup"

	// Eventually this will probably be a super-kickass powerup to the extreme,
	// but for now it'll fill the role of good ol' punching box (and actually
	// select the correct fist on pickup; hooray!)
	States
	{
	Pickup:
		TNT1 A 0 A_GiveInventory("PowerStrength")
		TNT1 A 0 HealThing(100, 0)
		TNT1 A 0 A_SelectWeapon("ArgFist")
		Stop
	}
}

ACTOR ArgPowerQuadDamage : PowerDamage
{
	DamageFactor "Normal", 4
	Inventory.Icon "QUADA0"
}

ACTOR ArgQuadDamage : PowerupGiver // [TODO] replace something
{
	Inventory.PickupMessage "$ARG_GOT_QUAD"
	Inventory.PickupSound "items/pickup/powerup"
	Inventory.UseSound "items/powerups/quad"
	Inventory.MaxAmount 0
	Powerup.Type ArgPowerQuadDamage
	Powerup.Duration -45
	Powerup.Color "AA00FF" 0.25

	+COUNTITEM
	+INVENTORY.ALWAYSPICKUP
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.FANCYPICKUPSOUND

	States
	{
	Spawn:
		QUAD ABCDEFEDCB 3 Bright
		Loop
	}
}

ACTOR ArgPowerHasteSpeed : PowerSpeed
{
	Powerup.Duration -45
	Powerup.Color "FFCC00" 0.25
	Speed 1.5
}
ACTOR ArgPowerHasteFiringSpeed : PowerDoubleFiringSpeed
{
	// [XA] at the moment this doesn't really do much since the weapon
	// animations use 1-tic animations everywhere. I'll have to come up
	// with something more clever at some point.
	Powerup.Duration -45
}
ACTOR ArgHaste : CustomInventory // [TODO] replace something
{
	Inventory.PickupMessage "$ARG_GOT_HASTE"
	Inventory.PickupSound "items/pickup/powerup"
	Inventory.UseSound "items/powerups/haste"
	Inventory.MaxAmount 0

	+COUNTITEM
	+INVENTORY.ALWAYSPICKUP
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.FANCYPICKUPSOUND

	States
	{
	Spawn:
		HSTE ABCDEFEDCB 3 Bright
		Loop
	Pickup:
		TNT1 A 0 A_GiveInventory("ArgPowerHasteSpeed")
		TNT1 A 0 A_GiveInventory("ArgPowerHasteFiringSpeed")
		Stop
	}
}

ACTOR ArgRegen : PowerupGiver // [TODO] replace something
{
	Inventory.PickupMessage "$ARG_GOT_REGEN"
	Inventory.PickupSound "items/pickup/powerup"
	Inventory.UseSound "items/powerups/regen"
	Inventory.MaxAmount 0
	Powerup.Type Regeneration
	Powerup.Duration -60
	Powerup.Strength 2
	Powerup.Color "0080FF" 0.25

	+COUNTITEM
	+INVENTORY.ALWAYSPICKUP
	+INVENTORY.AUTOACTIVATE
	+INVENTORY.FANCYPICKUPSOUND

	States
	{
	Spawn:
		REGN ABCDEFEDCB 3 Bright
		Loop
	}
}

// Classic items w/cvar-controlled spawners

ACTOR ArgBlurSphere : BlurSphere replaces BlurSphere
{
	States
	{
	Spawn:
		PINS A 0 NoDelay A_JumpIf(GetCvar("arg_powerupquad"), "AltItem")
		Goto Super::Spawn
	AltItem:
		PINS A 0 A_SpawnItemEx("ArgQuadDamage", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, tid)
		Stop
	}
}

ACTOR ArgInfrared : Infrared replaces Infrared
{
	States
	{
	Spawn:
		PVIS A 0 NoDelay A_JumpIf(GetCvar("arg_poweruphaste"), "AltItem")
		Goto Super::Spawn
	AltItem:
		PVIS A 0 A_SpawnItemEx("ArgHaste", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, tid)
		Stop
	}
}

ACTOR ArgSoulsphere : Soulsphere replaces Soulsphere
{
	States
	{
	Spawn:
		SOUL A 0 NoDelay A_JumpIf(GetCvar("arg_powerupregen"), "AltItem")
		Goto Super::Spawn
	AltItem:
		SOUL A 0 A_SpawnItemEx("ArgRegen", 0, 0, 0, 0, 0, 0, 0, SXF_NOCHECKPOSITION, 0, tid)
		Stop
	}
}

